[
{
	"uri": "//localhost:1313/",
	"title": "HTML - CSS cơ bản",
	"tags": [],
	"description": "",
	"content": "Tìm hiểu về HTML-CSS cơ bản HTML là gì ? HTML ( hypertext markup language). Nó giúp người dùng tạo và cấu trúc các thành phần trong trang web hoặc ứng dụng, phân chia các đoạn văn, heading, links, blockquotes,\u0026hellip; CSS là gì ? CSS là ngôn ngữ tạo phong cách cho trang web - Cascading style sheet language. Nó dùng để tạo phong cách và định kiểu cho những yếu tố được viết dưới dạng ngôn ngữ đánh dấu, như là HTML. Nội dung Trong workshop này, chúng ta sẽ timg hiểu vể những kiến thức cơ bản của HTML và CSS:\nLàm quen với HTML Làm quen với CSS Đệm, viền và khoảng lề Thuộc tính tạo nền Thuộc tính vị trí Một số tricks và tips "
},
{
	"uri": "//localhost:1313/1-html/",
	"title": "Làm quen với HTML",
	"tags": [],
	"description": "",
	"content": " Cấu trúc 1 file HTML Dưới đây là mô tả cho mỗi phần của cấu trúc file HTML:\r\u0026lt;!DOCTYPE html\u0026gt;: Khai báo kiểu tài liệu HTML, trong trường hợp này là HTML5.\r\u0026lt;html\u0026gt;: Thẻ gốc của trang web, bao gồm toàn bộ nội dung HTML.\r\u0026lt;head\u0026gt;: Phần tiêu đề của trang web, chứa các thông tin không hiển thị trực tiếp trên trang như tiêu đề, tập tin CSS, tập tin JavaScript, và các thẻ meta.\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;: Định nghĩa bộ ký tự sử dụng cho trang web là UTF-8, giúp hỗ trợ hiển thị các ký tự đặc biệt và ngôn ngữ khác nhau.\r\u0026lt;title\u0026gt;: Đặt tiêu đề của trang web, hiển thị trên thanh tiêu đề của trình duyệt.\r\u0026lt;body\u0026gt;: Phần chứa nội dung chính của trang web.\r\u0026lt;header\u0026gt;: Đầu trang của trang web, thường chứa logo, tiêu đề và các phần tử đầu trang khác.\r\u0026lt;nav\u0026gt;: Phần chứa menu điều hướng trang web.\r\u0026lt;main\u0026gt;: Phần chứa nội dung chính của trang web.\r\u0026lt;footer\u0026gt;: Cuối trang web, thường chứa thông tin bản quyền, liên kết liên hệ và các phần tử chân trang khác.\rCác thẻ và nội dung khác trong \u0026lt;body\u0026gt;: Bạn có thể thêm các phần tử HTML khác như \u0026lt;div\u0026gt;, \u0026lt;p\u0026gt;, \u0026lt;img\u0026gt;, \u0026lt;a\u0026gt;, \u0026lt;form\u0026gt;, v.v. để tạo và định dạng nội dung của trang web.\rLưu ý rằng cấu trúc trên chỉ là một cấu trúc cơ bản và bạn có thể tùy chỉnh nó tùy theo yêu cầu của dự án cụ thể.\rComments trong HTML\nSử dụng phím tắt ctrl / để chú thích hoặc vô hiệu hoá những dòng code \u0026lt;!-- Đây là chú thích --\u0026gt; Các thẻ HTML thông dụng\nDưới đây là một số thẻ HTML thông dụng được sử dụng để xây dựng cấu trúc và định dạng nội dung trang web:\n\u0026lt;html\u0026gt;: Thẻ gốc của trang web. \u0026lt;head\u0026gt;: Phần tiêu đề của trang web. \u0026lt;title\u0026gt;: Đặt tiêu đề của trang web. \u0026lt;body\u0026gt;: Phần chứa nội dung chính của trang web. \u0026lt;h1\u0026gt; đến \u0026lt;h6\u0026gt;: Định dạng tiêu đề từ lớn nhất đến nhỏ nhất. \u0026lt;p\u0026gt;: Định dạng đoạn văn bản. \u0026lt;a\u0026gt;: Tạo liên kết (hyperlink). \u0026lt;img\u0026gt;: Hiển thị hình ảnh. \u0026lt;ul\u0026gt; và \u0026lt;li\u0026gt;: Tạo danh sách không có thứ tự. \u0026lt;ol\u0026gt; và \u0026lt;li\u0026gt;: Tạo danh sách có thứ tự. \u0026lt;div\u0026gt;: Nhóm các phần tử HTML và tạo khu vực chứa. \u0026lt;span\u0026gt;: Định dạng một phần của văn bản. \u0026lt;table\u0026gt;, \u0026lt;tr\u0026gt;, \u0026lt;th\u0026gt;, \u0026lt;td\u0026gt;: Tạo bảng và các phần tử trong bảng. \u0026lt;form\u0026gt;, \u0026lt;input\u0026gt;, \u0026lt;textarea\u0026gt;, \u0026lt;button\u0026gt;: Tạo biểu mẫu và các phần tử đầu vào. \u0026lt;label\u0026gt;: Nhãn cho phần tử đầu vào trong biểu mẫu. \u0026lt;select\u0026gt;, \u0026lt;option\u0026gt;: Tạo danh sách thả xuống. \u0026lt;iframe\u0026gt;: Nhúng nội dung từ một trang web khác. \u0026lt;header\u0026gt;, \u0026lt;nav\u0026gt;, \u0026lt;main\u0026gt;, \u0026lt;footer\u0026gt;: Định dạng các phần tử chính của trang web. \u0026lt;section\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;aside\u0026gt;, \u0026lt;figure\u0026gt;, \u0026lt;figcaption\u0026gt;: Định dạng các phần tử phân đoạn và phần tử phụ. Attribute trong HTML là gì?\nTrong HTML, attribute (thuộc tính) là một phần mở rộng của các thẻ HTML, được sử dụng để cung cấp thông tin bổ sung về các phần tử HTML. Mỗi thuộc tính được đặt trong cặp cú pháp tên_thuộc_tính=\u0026ldquo;giá_trị\u0026rdquo;, trong đó:\ntên_thuộc_tính là tên của thuộc tính, ví dụ: class, id, src, href, width, height, v.v. giá_trị là giá trị được gán cho thuộc tính đó. Một phần tử HTML có thể có nhiều thuộc tính, và mỗi thuộc tính cung cấp thông tin cụ thể về cách nội dung hoặc hành vi của phần tử đó nên được xử lý.\nDưới đây là một số ví dụ về các thuộc tính thường được sử dụng trong HTML:\nclass: Xác định một lớp (class) cho phần tử để tùy chỉnh kiểu dáng bằng CSS hoặc thao tác JavaScript. id: Xác định một định danh duy nhất cho phần tử, thường được sử dụng để tham chiếu hoặc tạo liên kết đến phần tử đó. src: Xác định nguồn (source) của một hình ảnh, video, âm thanh hoặc tệp tin khác được nhúng vào trang. href: Xác định địa chỉ (URL) mà liên kết sẽ dẫn đến khi được nhấp vào. alt: Xác định một văn bản mô tả thay thế cho hình ảnh, hiển thị khi hình ảnh không thể hiển thị. style: Xác định các quy tắc kiểu dáng CSS trực tiếp cho phần tử. width và height: Xác định kích thước chiều rộng và chiều cao của một phần tử như hình ảnh hoặc bảng. disabled: Vô hiệu hóa một phần tử hoặc phần tử đầu vào, ngăn người dùng tương tác với nó. ID và Class trong HTML\nTrong HTML, id và class là hai thuộc tính quan trọng được sử dụng để xác định và định dạng các phần tử.\nid:\nThuộc tính id được sử dụng để xác định một định danh duy nhất cho một phần tử HTML trên trang.\nGiá trị của id phải là duy nhất trong toàn bộ tài liệu HTML. Không được sử dụng cùng một giá trị id cho nhiều phần tử.\nĐể chọn phần tử bằng id trong CSS hoặc thao tác JavaScript, sử dụng ký tự # trước tên id. Ví dụ: #myElement.\nVí dụ sử dụng id:\n\u0026lt;div id=\u0026#34;header\u0026#34;\u0026gt;Đây là tiêu đề\u0026lt;/div\u0026gt;\r\u0026lt;p id=\u0026#34;paragraph\u0026#34;\u0026gt;Đây là đoạn văn bản\u0026lt;/p\u0026gt; class:\nThuộc tính class được sử dụng để xác định một lớp (class) cho một hoặc nhiều phần tử HTML.\nGiá trị của class có thể được sử dụng cho nhiều phần tử khác nhau trên trang.\nĐể chọn phần tử bằng class trong CSS hoặc thao tác JavaScript, sử dụng ký tự . trước tên class. Ví dụ: .myClass.\nMột phần tử có thể có nhiều lớp (class) khác nhau, được phân tách bằng dấu cách.\nVí dụ sử dụng class:\n\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;Đây là phần tử container\u0026lt;/div\u0026gt;\r\u0026lt;p class=\u0026#34;highlight\u0026#34;\u0026gt;Đây là đoạn văn bản được làm nổi bật\u0026lt;/p\u0026gt; "
},
{
	"uri": "//localhost:1313/2-css/",
	"title": "Làm quen với CSS",
	"tags": [],
	"description": "",
	"content": " Sử dụng CSS trong HTML\nĐể sử dụng CSS (Cascading Style Sheets) trong HTML, bạn có thể sử dụng phương pháp sau:\nInline CSS: Bạn có thể áp dụng kiểu dáng trực tiếp cho một phần tử bằng cách sử dụng thuộc tính \u0026ldquo;style\u0026rdquo; trong thẻ HTML. Ví dụ:\n\u0026lt;p style=\u0026#34;color: blue; font-size: 18px;\u0026#34;\u0026gt;Đây là đoạn văn bản có màu xanh và cỡ chữ 18px.\u0026lt;/p\u0026gt; Internal CSS: Bạn có thể định nghĩa các quy tắc CSS bên trong phần \u0026ldquo;head\u0026rdquo; của tài liệu HTML bằng cách sử dụng thẻ \u0026ldquo;style\u0026rdquo;. Ví dụ:\n\u0026lt;head\u0026gt;\r\u0026lt;style\u0026gt;\rp {\rcolor: blue;\rfont-size: 18px;\r}\r\u0026lt;/style\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Đây là đoạn văn bản có màu xanh và cỡ chữ 18px.\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt; External CSS: Bạn có thể tạo một tệp CSS riêng biệt và liên kết nó với tài liệu HTML bằng cách sử dụng thẻ \u0026ldquo;link\u0026rdquo; trong phần \u0026ldquo;head\u0026rdquo; của tài liệu HTML. Ví dụ:\nTạo một tệp CSS với tên \u0026ldquo;style.css\u0026rdquo;:\n/* style.css */\rp {\rcolor: blue;\rfont-size: 18px;\r} Liên kết tệp CSS với tài liệu HTML:\n\u0026lt;head\u0026gt;\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Đây là đoạn văn bản có màu xanh và cỡ chữ 18px.\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt; ID và Class trong CSS\nTrong CSS, id và class là hai cách để xác định và áp dụng kiểu dáng cho các phần tử HTML.\nid:\nSelector id được sử dụng để chọn một phần tử duy nhất trên trang bằng cách sử dụng giá trị id được xác định trong HTML.\nĐể chọn - một phần tử bằng id, sử dụng ký tự # trước tên id.\nCú pháp: #myElement { \u0026hellip; }\nVí dụ:\n#header {\rfont-size: 24px;\rcolor: blue;\r} Trong ví dụ trên, tất cả các phần tử có id=\u0026ldquo;header\u0026rdquo; sẽ được áp dụng kiểu dáng với kích thước chữ là 24px và màu chữ là xanh.\nclass:\nSelector class được sử dụng để chọn một hoặc nhiều phần tử có cùng giá trị class.\nĐể chọn một phần tử bằng class, sử dụng ký tự . trước tên class.\nCú pháp: .myClass { \u0026hellip; }\nVí dụ:\n.highlight {\rbackground-color: yellow;\r} Trong ví dụ trên, tất cả các phần tử có class=\u0026ldquo;highlight\u0026rdquo; sẽ có màu nền là màu vàng.\nKết hợp id và class:\nBạn cũng có thể kết hợp id và class để tạo ra các selector phức tạp hơn. Ví dụ: #header.highlight {\rfont-weight: bold;\r} Trong ví dụ trên, phần tử có cả id=\u0026ldquo;header\u0026rdquo; và class=\u0026ldquo;highlight\u0026rdquo; sẽ có kiểu dáng được đặt in đậm (font-weight: bold). Lưu ý: Trong CSS, id mang tính duy nhất và chỉ được sử dụng cho một phần tử duy nhất trong tài liệu HTML. Trong khi đó, class có thể được áp dụng cho nhiều phần tử khác nhau trên trang.\nCSS selectors cơ bản\nTrong CSS, CSS selectors là các cách chúng ta sử dụng để chọn ra các phần tử (elements) mà chúng ta muốn \u0026ldquo;style\u0026rdquo; cho chúng. Có 2 CSS selectors thân thuộc với chúng ta nhất là id và class.\nTrong cùng 1 page HTML, mỗi ID cần là duy nhất. Đây là nguyên tắc của việc sử dụng ID, nếu vi phạm sẽ gặp cảnh báo trong tab Console của dev tool, và Javascript sẽ không lấy ra được cả 2 phần tử có dùng ID (Javascript các bạn sẽ học ở khóa sau).\nCSS selectors là công cụ vô cùng mạnh mẽ. Toàn bộ các selectors trong CSS đều có thể linh động kết hợp với nhau khi sử dụng giúp lập trình viên có thể chọn được bất cứ phần tử HTML nào trong website.\nBảng tra cứu CSS selectors cơ bản\nSelector Ví dụ Mô tả .class .intro Chọn tất cả các thẻ có class=\u0026ldquo;intro\u0026rdquo; .class1.class2 .name1.name2 Chọn tất cả các thẻ có cả name1 và name2 được đặt trong thuộc tinh class của nó * * Chọn tất cả các thẻ element h2 Chọn tất cả các thẻ h2 element.class div.box Chọn tất cả thẻ div có class=\u0026ldquo;box\u0026rdquo; element,element div,h2 Chọn tất cả thẻ div và h2 element element div p Chọn tất cả thẻ p trong thẻ div element \u0026gt; element div \u0026gt; p Chọn tất cả thẻ p là con trực tiếp của thẻ div element + element div + p Chọn thẻ p đứng liền kề sau thẻ div element ~ element div ~ p Chọn tất cả thẻ p đứng sau thẻ div Ví dụ: Lựa chọn qua 1 class\n\u0026lt;h2 id=\u0026#34;primary-heading\u0026#34;\u0026gt;Tiêu đề 1\u0026lt;/h2\u0026gt;\r\u0026lt;h2 id=\u0026#34;secondary-heading\u0026#34;\u0026gt;Tiêu đề 2\u0026lt;/h2\u0026gt;\r...\r\u0026lt;style\u0026gt;\r#primary-heading {\rcolor: red;\r}\r\u0026lt;/style\u0026gt; Kết quả: Thẻ có id=\u0026ldquo;primary-heading\u0026rdquo; thành màu đỏ.\nVí dụ 2: Lựa chọn qua nhiều class\nMột thẻ có thể có nhiều class, mỗi class cách nhau bằng 1 khoảng trắng (dấu space).\n\u0026lt;p class=\u0026#34;p1-normal\u0026#34;\u0026gt;Đoạn văn 1\u0026lt;/p\u0026gt;\r\u0026lt;p class=\u0026#34;p1-normal\u0026#34;\u0026gt;Đoạn văn 2\u0026lt;/p\u0026gt;\r\u0026lt;p class=\u0026#34;p1-normal p2-red\u0026#34;\u0026gt;Đoạn văn 3\u0026lt;/p\u0026gt;\r\u0026lt;p class=\u0026#34;p1-normal p2-red\u0026#34;\u0026gt;Đoạn văn 4\u0026lt;/p\u0026gt;\r\u0026lt;style\u0026gt;\r.p1-normal {\rcolor: green;\r}\r\u0026lt;!-- Lưu ý, các tên class viết liền nhau, không có khoảng trắng --\u0026gt;\r.p1-normal.p2-red {\rcolor: red;\r}\r\u0026lt;/style\u0026gt; Kết quả, tất cả các thẻ đồng thời có cả class p1-normal và p2-red đều có màu đỏ.\nTương tự như vậy, nếu thẻ có nhiều class hơn bạn chỉ cần nối thêm tên class vào khi CSS, ví dụ: .class1.class2.class3. Trong trường hợp này, thuộc tính CSS nằm trong selector được nối bởi nhiều class hơn (chỉ ra chi tiết hơn) sẽ được ưu tiên hơn.\nVí dụ 3: CSS cho các thẻ con\n\u0026lt;p class=\u0026#34;children-1\u0026#34;\u0026gt;Đoạn văn 1 (không parent)\u0026lt;/p\u0026gt;\r\u0026lt;p class=\u0026#34;children-2\u0026#34;\u0026gt;Đoạn văn 2 (không parent)\u0026lt;/p\u0026gt;\r\u0026lt;div class=\u0026#34;parent\u0026#34;\u0026gt;\r\u0026lt;p\u0026gt;Đoạn văn 1 (parent 1)\u0026lt;/p\u0026gt;\r\u0026lt;p class=\u0026#34;children-1\u0026#34;\u0026gt;Đoạn văn 1 (con của .parent)\u0026lt;/p\u0026gt;\r\u0026lt;p class=\u0026#34;children-2\u0026#34;\u0026gt;Đoạn văn 2 (con của .parent)\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;style\u0026gt;\r/* Chọn tất cả thẻ \u0026#34;p\u0026#34; là con của thẻ có class \u0026#34;parent\u0026#34; */\r.parent p {\rcolor: green;\r}\r/* Chọn tất cả thẻ có class \u0026#34;children-1\u0026#34; là con của thẻ có class \u0026#34;parent\u0026#34; */\r.parent .children-1 {\rcolor: red;\r}\r\u0026lt;/style\u0026gt; Chúng ta có thể tùy ý kết hợp các CSS selectors đã học để lựa chọn ra đúng thẻ chúng ta muốn CSS. Ở ví dụ trên, để lựa chọn thẻ con nằm trong 1 thẻ khác ta sẽ sử dụng selector có cú pháp selector-cha selector-con (lưu ý, giữa 2 selectors có một khoảng trắng - dấu cách).\nĐộ ưu tiên trong CSS\nKhi các đối tượn chịu tác động của nhiều rule khác nhau thì xảy ra hiện tượng chồng chéo.\nKhi chồng chéo xảy ra, thử tự ưu tiên sẽ xác định định dạng của đối tượng 10.1. Dạng chồng chéo giữa các rule khác nhau\nThứ tự ưu tiên của bốn dạng rule như bảng dưới đây:\nCác dạng rule Thứ tự ưu tiên Phạm vi tác động inline 1 4 id 2 3 class 3 2 tag 4 1 Theo bảng tổng hợp trên, có thể rút ra quy luật chung là: mức độ ưu tiên tỉ lệ nghịch với phạm vi ảnh hưởng. Phạm vi của rule càng lớn thì mức độ ưu tiên càng thấp và ngược lại.\nVí dụ: Đoạn code \u0026ldquo;HTML-CSS\u0026rdquo; dưới đây bị ảnh hưởng bởi 4 rule thuộc 4 loại khác nhau ( inline, p, class.p1, id #p2). 4 quy tắc này chỉ định 4 màu chữ khác nhau:\n\u0026lt;p class=\u0026#34;p1\u0026#34; id=\u0026#34;p2\u0026#34; style=\u0026#34;color:black;\u0026#34;\u0026gt;HTML-CSS\u0026lt;/p\u0026gt; Kết quả: Theo thứ tự ưu tiên, màu của \u0026ldquo;HTML-CSS\u0026rdquo; sẽ tuân theo màu ưu tiên (đen) của rule inline\nSử dụng biến trong CSS\nTrong CSS, bạn không thể sử dụng biến trực tiếp như trong các ngôn ngữ lập trình như JavaScript. Tuy nhiên, từ phiên bản CSS3 trở đi, bạn có thể sử dụng các biến tùy chỉnh thông qua CSS variables (còn được gọi là CSS custom properties).\nĐể sử dụng biến trong CSS, bạn cần định nghĩa biến bằng cách sử dụng syntax \u0026ndash;tên-biến: giá-trị;.\nVí dụ, để định nghĩa một biến màu sắc: :root {\r--primary-color: #ff0000;\r} Sau đó, bạn có thể sử dụng biến này trong các khối CSS khác bằng cách sử dụng syntax var(\u0026ndash;tên-biến).\nVí dụ, để sử dụng biến màu sắc đã định nghĩa:\n``` h1 {\rcolor: var(--primary-color);\r}\r```\rKhi trình duyệt tải CSS, nó sẽ thay thế var(\u0026ndash;primary-color) bằng giá trị thực tế của biến \u0026ndash;primary-color (trong trường hợp này là #ff0000). Điều này cho phép bạn dễ dàng thay đổi giá trị của biến duy nhất và áp dụng thay đổi đó cho tất cả các vị trí mà biến được sử dụng.\nBạn cũng có thể kế thừa giá trị biến từ phần tử cha bằng cách sử dụng syntax inherit.\nVí dụ:\n.child-element {\rcolor: inherit;\r} Các đơn vị trong CSS\nAbsolute units ( đơn vị tuyệt đối) là các đơn vị vật lý đã được định nghĩa sẵn và đại diện cho các đơn vị đo lường vật lý. Các đơn vị này không bị phụ thuộc và không hề thay đổi bởi bất cứ tác động nào. Gồm: px, pt, cm, mm, inch, pc. Trong CSS sẽ thường dùng đơn vị px (pixel) Relative units ( đơn vị tương đối) Là các đơn vị đo lường được sử dụng trong CSS ở mức tương đối, nghĩa là nó có thể sẽ được thay đổi bởi các thành phần khác ví dụ như thay đổi phụ thuộc vào kích thước màn hình. Gồm: %, rem, em, vw, vh, vmin, vmax, ex, ch. Trong CSS thường sử dụng: %, rem, em, vw, vh Một số hàm trong CSS\nCSS cung cấp một số hàm tích hợp sẵn để thực hiện các phép tính và biểu thức trong quy tắc CSS. Dưới đây là một số hàm phổ biến trong CSS:\nrgb(), rgba(): Hàm này được sử dụng để xác định một màu sắc bằng giá trị đỏ (red), xanh lá cây (green) và xanh dương (blue). Hàm rgba() còn cho phép bạn xác định một giá trị alpha (độ trong suốt) để điều chỉnh độ trong suốt của màu sắc.\nVí dụ: background-color: rgb(255, 0, 0); /* Màu đỏ */\rbackground-color: rgba(255, 0, 0, 0.5); /* Màu đỏ với độ trong suốt 50% */ calc(): Hàm này cho phép bạn thực hiện các phép tính số học trong giá trị CSS. Bạn có thể sử dụng các phép tính cộng (+), trừ (-), nhân (*) và chia (/) để tính toán giá trị.\nVí dụ: width: calc(100% - 20px); /* Chiều rộng là 100% trừ đi 20px */\rheight: calc(50vh + 10px); /* Chiều cao là 50% chiều cao của viewport cộng thêm 10px */ var(): Hàm này được sử dụng để sử dụng giá trị của một biến CSS. Bạn có thể định nghĩa biến bằng cách sử dụng \u0026ndash;tên-biến: giá-trị; và sau đó sử dụng var(\u0026ndash;tên-biến) để sử dụng giá trị biến đó.\nVí dụ: :root {\r--primary-color: #ff0000;\r}\rh1 {\rcolor: var(--primary-color); /* Sử dụng giá trị của biến primary-color */\r} url(): Hàm này được sử dụng để chỉ định một đường dẫn tới một tài nguyên như hình ảnh, video hoặc font.\nVí dụ: background-image: url(\u0026#34;path/to/image.jpg\u0026#34;); /* Sử dụng hình ảnh từ đường dẫn */ min() và max(): Hai hàm này được sử dụng để lấy giá trị nhỏ nhất hoặc lớn nhất từ một danh sách các giá trị.\nVí dụ: width: min(300px, 50%); /* Chiều rộng là giá trị nhỏ nhất giữa 300px và 50% */\rheight: max(200px, 30vh); /* Chiều cao là giá trị lớn nhất giữa 200px và 30% chiều cao của viewport */ Đây chỉ là một số hàm phổ biến trong CSS. CSS cung cấp nhiều hàm khác nhau để thực hiện các phép tính và biểu thức phức tạp hơn\nPseudo classes trong CSS\nPseudo classes trong CSS là các lớp ảo được áp dụng cho các phần tử dựa trên trạng thái hoặc quan hệ với phần tử khác trong cây DOM. Pseudo classes được kí hiệu bằng dấu hai chấm (::) hoặc dấu hai chấm đơn (:). Dưới đây là một số pseudo classes phổ biến trong CSS: :hover: Áp dụng cho phần tử khi con trỏ chuột di chuyển qua phần tử đó.\nVí dụ:\na:hover {\rcolor: red;\r}``` :active: Áp dụng cho phần tử khi người dùng nhấn giữ chuột trái lên phần tử đó.\nVí dụ: button:active {\rbackground-color: blue;\r} :focus: Áp dụng cho phần tử khi đang nhận trọng tâm (focus). Thường được sử dụng cho các phần tử có thể tương tác như input, textarea.\nVí dụ: input:focus {\rborder-color: green;\r} :first-child: Áp dụng cho phần tử đầu tiên trong danh sách các phần tử con của phần tử cha.\nVí dụ: ul li:first-child {\rfont-weight: bold;\r} :last-child: Áp dụng cho phần tử cuối cùng trong danh sách các phần tử con của phần tử cha.\nVí dụ: ul li:last-child {\rcolor: red;\r} :nth-child(): Áp dụng cho phần tử dựa trên chỉ số của nó trong danh sách các phần tử con của phần tử cha.\nVí dụ: ul li:nth-child(odd) {\rbackground-color: lightgray;\r} Trên đây chỉ là một số pseudo classes phổ biến trong CSS. CSS cung cấp nhiều pseudo classes khác nhau cho phép bạn chọn và tùy chỉnh phần tử dựa trên các trạng thái và quan hệ khác nhau trong cây DOM.\nPseudo elements trong CSS Pseudo elements trong CSS cho phép bạn tạo ra các phần tử ảo và chọn và tùy chỉnh chúng bằng CSS. Pseudo elements được kí hiệu bằng dấu hai chấm đôi (::). Dưới đây là một số pseudo elements phổ biến trong CSS: ::before: Tạo một phần tử ảo được chèn vào phần tử đầu tiên của phần tử đã chọn. Phần tử ảo này thường được sử dụng để thêm nội dung trước phần tử đã chọn.\nVí dụ: p::before {\rcontent: \u0026#34;Đây là nội dung trước đoạn văn.\u0026#34;;\rfont-weight: bold;\r} ::after: Tạo một phần tử ảo được chèn vào phần tử cuối cùng của phần tử đã chọn. Phần tử ảo này thường được sử dụng để thêm nội dung sau phần tử đã chọn.\nVí dụ: p::after {\rcontent: \u0026#34;Đây là nội dung sau đoạn văn.\u0026#34;;\rcolor: red;\r} ::first-line: Chọn dòng đầu tiên trong một phần tử dài văn bản và cho phép bạn tùy chỉnh nó.\nVí dụ: p::first-line {\rcolor: blue;\rfont-size: 20px;\r} ::first-letter: Chọn chữ cái đầu tiên trong một phần tử văn bản và cho phép bạn tùy chỉnh nó.\nVí dụ: p::first-letter {\rfont-size: 24px;\rfont-weight: bold;\r} ::selection: Tùy chỉnh phần được chọn trong văn bản khi người dùng chọn nó.\nVí dụ: ::selection {\rbackground-color: yellow;\rcolor: black;\r} Trên đây chỉ là một số pseudo elements phổ biến trong CSS. Bằng cách sử dụng pseudo elements, bạn có thể tạo ra các phần tử ảo và điều chỉnh chúng để tạo hiệu ứng và trang trí phần tử gốc.\n"
},
{
	"uri": "//localhost:1313/3-pmb/",
	"title": "Đệm, viền và khoảng lề",
	"tags": [],
	"description": "",
	"content": " Thuộc tính padding (đệm)\nTrong CSS, thuộc tính \u0026ldquo;padding\u0026rdquo; được sử dụng để xác định khoảng cách giữa nội dung của một phần tử và ranh giới (border) của nó. Thuộc tính này thường được sử dụng để tạo ra khoảng trắng xung quanh nội dung của một phần tử. Cú pháp: padding: giá-trị; Giá trị của thuộc tính \u0026ldquo;padding\u0026rdquo; có thể là một giá trị duy nhất hoặc là một danh sách gồm bốn giá trị, tương ứng với các cạnh top, right, bottom và left (theo thứ tự kim đồng hồ). Các giá trị có thể được xác định bằng đơn vị đo (px, em, rem, %) hoặc bằng từ khóa như \u0026ldquo;auto\u0026rdquo;. Thuộc tính border (đường viền)\nTrong CSS, thuộc tính \u0026ldquo;border\u0026rdquo; được sử dụng để xác định đường viền xung quanh một phần tử. Đường viền có thể là một đường thẳng, một đường nét đứt, hoặc một hình dạng khác.\nCú pháp: border: [kích thước] [loại] [màu]; [kích thước]: Xác định kích thước của đường viền. Có thể là một giá trị duy nhất hoặc là một danh sách gồm bốn giá trị (top, right, bottom, left) tương ứng với các cạnh của phần tử. Các giá trị có thể là số nguyên, số thập phân hoặc sử dụng các đơn vị đo như px, em, rem.\n[loại]: Xác định loại đường viền. Có thể là \u0026ldquo;solid\u0026rdquo; (đường thẳng), \u0026ldquo;dotted\u0026rdquo; (đường nét đứt), \u0026ldquo;dashed\u0026rdquo; (đường nét gạch), \u0026ldquo;double\u0026rdquo; (đường viền kép), \u0026ldquo;groove\u0026rdquo; (đường viền rãnh), \u0026ldquo;ridge\u0026rdquo; (đường viền núi), \u0026ldquo;inset\u0026rdquo; (đường viền lồi vào), \u0026ldquo;outset\u0026rdquo; (đường viền lồi ra), hoặc \u0026ldquo;none\u0026rdquo; (không có đường viền).\n[màu]: Xác định màu sắc của đường viền. Có thể là tên màu (ví dụ: \u0026ldquo;red\u0026rdquo;, \u0026ldquo;blue\u0026rdquo;), mã màu hex (ví dụ: \u0026ldquo;#ff0000\u0026rdquo;), hoặc giá trị màu rgba.\nVí dụ:\nSử dụng giá trị duy nhất:\n.box {\rborder: 2px solid red;\r} Đường viền có kích thước 2px, loại đường thẳng (solid) và màu đỏ.\nSử dụng danh sách giá trị:\n.box {\rborder: 1px solid red;\rborder-width: 1px 2px 3px 4px;\r} Đường viền của phần tử có kích thước 1px ở cạnh trên, 2px ở cạnh phải, 3px ở cạnh dưới và 4px ở cạnh trái.\nNgoài ra, cũng có thể sử dụng các thuộc tính con của \u0026ldquo;border\u0026rdquo; như \u0026ldquo;border-top\u0026rdquo;, \u0026ldquo;border-right\u0026rdquo;, \u0026ldquo;border-bottom\u0026rdquo; và \u0026ldquo;border-left\u0026rdquo; để chỉ định giá trị cho từng cạnh một.\nVí dụ: .box {\rborder-top: 1px solid red;\rborder-right: 2px dashed blue;\rborder-bottom: 3px dotted green;\rborder-left: 4px double orange;\r} Phần tử có đường viền ở từng cạnh với các kích thước, loại và màu sắc khác nhau. Trên đây là cách sử dụng thuộc tính \u0026ldquo;border\u0026rdquo; trong CSS để xác định đường viền xung quanh một phần tử.\nThuộc tính margin (khoảng cách lề)\nTrong CSS, thuộc tính \u0026ldquo;margin\u0026rdquo; được sử dụng để xác định khoảng cách giữa các phần tử và ranh giới của chúng. Thuộc tính này thường được sử dụng để tạo ra khoảng trắng xung quanh các phần tử và điều chỉnh khoảng cách giữa chúng.\nCú pháp: margin: giá-trị; Giá trị của thuộc tính \u0026ldquo;margin\u0026rdquo; có thể là một giá trị duy nhất hoặc là một danh sách gồm bốn giá trị, tương ứng với các cạnh top, right, bottom và left (theo thứ tự kim đồng hồ). Các giá trị có thể được xác định bằng đơn vị đo (px, em, rem, %) hoặc bằng từ khóa như \u0026ldquo;auto\u0026rdquo;.\nVí dụ: Sử dụng giá trị duy nhất: .box {\rmargin: 20px;\r} Sử dụng danh sách giá trị: .box {\rmargin: 10px 20px 15px 5px;\r} Giá trị \u0026ldquo;10px\u0026rdquo; áp dụng cho cạnh trên (top), \u0026ldquo;20px\u0026rdquo; áp dụng cho cạnh phải (right), \u0026ldquo;15px\u0026rdquo; áp dụng cho cạnh dưới (bottom) và \u0026ldquo;5px\u0026rdquo; áp dụng cho cạnh trái (left). Ngoài ra, cũng có thể sử dụng các thuộc tính con của \u0026ldquo;margin\u0026rdquo; như \u0026ldquo;margin-top\u0026rdquo;, \u0026ldquo;margin-right\u0026rdquo;, \u0026ldquo;margin-bottom\u0026rdquo; và \u0026ldquo;margin-left\u0026rdquo; để chỉ định giá trị cho từng cạnh một.\nVí dụ: .box {\rmargin-top: 10px;\rmargin-right: 20px;\rmargin-bottom: 15px;\rmargin-left: 5px;\r} Giá trị của \u0026ldquo;margin\u0026rdquo; cũng có thể là âm để tạo ra sự chồng chéo giữa các phần tử.\nVí dụ: .box {\rmargin: -10px;\r} Trên đây là cách sử dụng thuộc tính \u0026ldquo;margin\u0026rdquo; trong CSS để xác định khoảng cách giữa các phần tử và ranh giới của chúng. Thuộc tính box-sizing\nThuộc tính \u0026ldquo;box-sizing\u0026rdquo; trong CSS được sử dụng để xác định cách tính toán kích thước của một phần tử, bao gồm cả kích thước của nội dung, padding và border.\nCú pháp: box-sizing: giá-trị; Có hai giá trị phổ biến cho thuộc tính \u0026ldquo;box-sizing\u0026rdquo;:\nGiá trị \u0026ldquo;content-box\u0026rdquo; (giá trị mặc định): Kích thước của phần tử chỉ tính toán dựa trên kích thước của nội dung bên trong phần tử, không tính thêm padding và border. Đây là cách tính toán kích thước truyền thống của các phần tử trong CSS.\nGiá trị \u0026ldquo;border-box\u0026rdquo;: Kích thước của phần tử tính toán bao gồm cả kích thước của nội dung, padding và border. Điều này có nghĩa là kích thước của phần tử sẽ bao gồm cả padding và border, mà không làm thay đổi kích thước tổng cộng của phần tử.\nVí dụ:\n.box {\rbox-sizing: border-box;\rwidth: 200px;\rpadding: 20px;\rborder: 1px solid black;\r} Trong ví dụ trên, thuộc tính \u0026ldquo;box-sizing\u0026rdquo; được đặt thành \u0026ldquo;border-box\u0026rdquo;, điều này có nghĩa là kích thước của phần tử sẽ tính toán bao gồm cả padding và border. Vì vậy, dù đã đặt width là 200px, kích thước tổng cộng của phần tử vẫn là 200px (bao gồm cả nội dung, padding và border), và không bị thay đổi do padding và border.\nTrên đây là ý nghĩa và cách sử dụng thuộc tính \u0026ldquo;box-sizing\u0026rdquo; trong CSS.\n"
},
{
	"uri": "//localhost:1313/4-bg/",
	"title": "Thuộc tính tạo nền",
	"tags": [],
	"description": "",
	"content": " Thuộc tính background-image\nThuộc tính background-image trong CSS được sử dụng để đặt hình ảnh làm nền cho một phần tử. Bạn có thể chỉ định đường dẫn đến hình ảnh bằng cách sử dụng URL hoặc giá trị gradient để tạo hiệu ứng nền.\nCú pháp: background-image: giá-trị; Ví dụ sử dụng cách đặt hình ảnh làm nền: .box {\rbackground-image: url(\u0026#34;path/to/image.jpg\u0026#34;);\r} Trong ví dụ trên, path/to/image.jpg là đường dẫn đến hình ảnh mà bạn muốn sử dụng làm nền cho phần tử có lớp CSS .box. Ngoài ra, bạn cũng có thể sử dụng giá trị gradient để tạo hiệu ứng nền.\nVí dụ: .box {\rbackground-image: linear-gradient(to bottom, #ff0000, #00ff00);\r} Trong ví dụ này, chúng ta sử dụng giá trị linear-gradient để tạo một hiệu ứng gradient từ màu đỏ (#ff0000) đến màu xanh lá cây (#00ff00) từ trên xuống dưới. Lưu ý rằng thuộc tính background-image có thể được kết hợp với các thuộc tính khác như background-repeat, background-position, background-size để tùy chỉnh cách hiển thị hình ảnh nền.\nThuộc tính background-size với cover, contain\nbackground-size: cover;: Khi sử dụng giá trị cover, hình ảnh nền sẽ được co giãn hoặc thu nhỏ sao cho nó phủ đầy toàn bộ phần tử mà không bị méo. Điều này có nghĩa là hình ảnh có thể bị cắt bớt ở một số phần nếu tỷ lệ khung hình không khớp với tỷ lệ khung hình của phần tử. Ví dụ: .box {\rbackground-image: url(\u0026#34;path/to/image.jpg\u0026#34;);\rbackground-size: cover;\r} background-size: contain;: Khi sử dụng giá trị contain, hình ảnh nền sẽ được co giãn hoặc thu nhỏ sao cho nó hiển thị toàn bộ trong phần tử mà không bị cắt bớt. Điều này có thể dẫn đến việc xuất hiện dải trống (background-color) nếu tỷ lệ khung hình không khớp với tỷ lệ khung hình của hình ảnh. Ví dụ: .box {\rbackground-image: url(\u0026#34;path/to/image.jpg\u0026#34;);\rbackground-size: contain;\r} Trên đây là cách sử dụng thuộc tính background-size với giá trị cover và contain để điều chỉnh kích thước của hình ảnh nền trong CSS.\nThuộc tính background-origin\nThuộc tính background-origin trong CSS được sử dụng để xác định điểm xuất phát (origin) của hình ảnh nền và các phần tử khác liên quan đến việc vẽ nền.\nCú pháp: background-origin: giá-trị; Có ba giá trị phổ biến cho thuộc tính background-origin:\npadding-box (giá trị mặc định): Hình ảnh nền và các phần tử liên quan (như padding và border) bắt đầu từ biên trong padding box của phần tử. Điều này có nghĩa là hình ảnh nền và các phần tử khác sẽ không xuyên qua phần padding và border.\nborder-box: Hình ảnh nền và các phần tử liên quan bắt đầu từ biên trong border box của phần tử. Điều này có nghĩa là hình ảnh nền và các phần tử có thể xuyên qua phần border, nhưng không xuyên qua phần margin.\ncontent-box: Hình ảnh nền và các phần tử liên quan bắt đầu từ biên trong content box của phần tử. Điều này có nghĩa là hình ảnh nền và các phần tử có thể xuyên qua phần padding và border, và chỉ giới hạn bởi khu vực chứa nội dung.\nVí dụ:\n.box {\rbackground-image: url(\u0026#34;path/to/image.jpg\u0026#34;);\rbackground-origin: content-box;\r} Trong ví dụ trên, thuộc tính background-origin được đặt thành content-box, điều này có nghĩa là hình ảnh nền và các phần tử liên quan sẽ bắt đầu từ biên bên trong content box của phần tử.\nThuộc tính background-origin thường được sử dụng kết hợp với các thuộc tính khác như background-image, background-position, background-repeat, và background-size để tùy chỉnh việc vẽ nền của một phần tử trong CSS.\nThuộc tính background-position\nThuộc tính background-position trong CSS được sử dụng để xác định vị trí xuất hiện của hình ảnh nền bên trong phần tử.\nCú pháp: background-position: giá-trị-x giá-trị-y; Hai giá trị giá-trị-x và giá-trị-y trong background-position xác định vị trí ngang và dọc của hình ảnh nền tương đối với phần tử. Có thể sử dụng các giá trị đơn vị như pixel (px), phần trăm (%), hoặc từ khoá như left, right, top, bottom, center để chỉ định vị trí.\nVí dụ: .box {\rbackground-image: url(\u0026#34;path/to/image.jpg\u0026#34;);\rbackground-position: center top;\r} Trong ví dụ trên, hình ảnh nền sẽ được căn giữa theo chiều ngang (center) và đặt ở phía trên cùng theo chiều dọc (top) bên trong phần tử có lớp CSS .box. Bạn cũng có thể sử dụng các giá trị số để xác định vị trí chính xác.\nVí dụ: .box {\rbackground-image: url(\u0026#34;path/to/image.jpg\u0026#34;);\rbackground-position: 20px 50%;\r} Trong ví dụ này, hình ảnh nền sẽ được dịch chuyển 20 pixel từ cạnh trái và căn giữa theo chiều dọc (50%) bên trong phần tử. Ngoài ra, background-position cũng hỗ trợ việc kết hợp các từ khoá và giá trị số để xác định vị trí.\nVí dụ: .box {\rbackground-image: url(\u0026#34;path/to/image.jpg\u0026#34;);\rbackground-position: center 20%;\r} Trong ví dụ này, hình ảnh nền sẽ được căn giữa theo chiều ngang (center) và dịch chuyển 20% từ cạnh trên cùng theo chiều dọc bên trong phần tử Lưu ý rằng thuộc tính background-position cũng có thể được sử dụng cùng với các giá trị khác như background-repeat, background-size, và background-origin để tùy chỉnh cách hiển thị hình ảnh nền\nCú pháp \u0026ldquo;shorthand\u0026rdquo; cho background\nThuộc tính background trong CSS cho phép bạn gộp nhiều thuộc tính liên quan đến hình ảnh nền thành một cú pháp ngắn gọn.\nCú pháp: background: giá-trị; Giá trị của thuộc tính background có thể bao gồm nhiều thuộc tính con, được phân cách bằng dấu cách. Dưới đây là một số giá trị phổ biến cho thuộc tính background:\nbackground-color: Xác định màu nền của phần tử. background-image: Xác định hình ảnh nền. background-repeat: Xác định cách lặp lại hình ảnh nền. background-position: Xác định vị trí xuất hiện của hình ảnh nền. background-size: Xác định kích thước của hình ảnh nền. background-origin: Xác định điểm xuất phát của hình ảnh nền. Ví dụ:\n.box {\rbackground: #F0F0F0 url(\u0026#34;path/to/image.jpg\u0026#34;) no-repeat center top / cover;\r} Trong ví dụ trên, thuộc tính background được sử dụng để gộp background-color, background-image, background-repeat, background-position, background-size thành một cú pháp ngắn gọn. Màu nền được đặt là #F0F0F0, hình ảnh nền là url(\u0026ldquo;path/to/image.jpg\u0026rdquo;), không lặp lại (no-repeat), căn giữa theo chiều ngang và đặt ở phía trên cùng theo chiều dọc (center top), và có kích thước cover.\nLưu ý rằng khi sử dụng cú pháp ngắn gọn background, các thuộc tính không được xác định sẽ có giá trị mặc định. Đồng thời, thứ tự của các thuộc tính con trong cú pháp background không quan trọng, nhưng giữa chúng cần có dấu cách phân cách.\n"
},
{
	"uri": "//localhost:1313/5-position/",
	"title": "Thuộc tính vị trí",
	"tags": [],
	"description": "",
	"content": " CSS position relative\nTrong CSS, thuộc tính position: relative; được sử dụng để xác định vị trí của một phần tử dựa trên vị trí ban đầu của nó trong luồng bình thường của tài liệu. Khi một phần tử có thuộc tính position: relative;, nó sẽ được di chuyển dựa trên giá trị của các thuộc tính top, right, bottom, và left. Cú pháp: selector {\rposition: relative;\rtop: value;\rright: value;\rbottom: value;\rleft: value;\r} position:relative; : Xác định rằng phần tử sẽ được xác định vị trí dựa trên vị trí ban đầu của nó. top, right, bottom, left: Xác định khoảng cách mà phần tử sẽ di chuyển từ vị trí ban đầu của nó. Giá trị có thể là số nguyên hoặc phần trăm. Ví dụ: .box {\rposition: relative;\rtop: 20px;\rleft: 10px;\r} Trong ví dụ trên, phần tử có lớp CSS .box sẽ được di chuyển 20px từ vị trí ban đầu theo hướng từ trên xuống và 10px từ vị trí ban đầu theo hướng từ trái sang phải. Lưu ý rằng khi sử dụng position: relative;, phần tử vẫn giữ lại vị trí gốc của nó trong luồng bình thường của tài liệu. Việc di chuyển phần tử chỉ ảnh hưởng đến vị trí hiển thị của nó trên giao diện người dùng. Các phần tử khác trong tài liệu không sẽ không bị di chuyển hoặc ảnh hưởng bởi phần tử có position: relative;.\nCSS position absolute\nTrong CSS, thuộc tính position: absolute; được sử dụng để xác định vị trí của một phần tử dựa trên vị trí của phần tử cha gần nhất có thuộc tính position được đặt là relative, absolute, hoặc fixed. Phần tử với position: absolute; sẽ được di chuyển đến vị trí cụ thể trong tài liệu, không ảnh hưởng tới vị trí của các phần tử khác.\nCú pháp: selector {\rposition: absolute;\rtop: value;\rright: value;\rbottom: value;\rleft: value;\r} position: absolute;: Xác định rằng phần tử sẽ được xác định vị trí tuyệt đối, dựa trên vị trí của phần tử cha có thuộc tính position là relative, absolute, hoặc fixed.\ntop, right, bottom, left: Xác định vị trí cụ thể của phần tử. Giá trị có thể là số nguyên hoặc phần trăm.\nVí dụ: .box {\rposition: relative;\r}\r.box-child {\rposition: absolute;\rtop: 20px;\rleft: 10px;\r} Trong ví dụ trên, phần tử có lớp CSS .child sẽ được đặt ở vị trí cách phần tử cha có lớp CSS .box 20px từ phía trên và 10px từ phía trái. Phần tử có position: absolute; sẽ không chiếm diện tích trong luồng bình thường của tài liệu, nghĩa là các phần tử khác không được ảnh hưởng bởi nó. Nếu không có phần tử cha có position: relative;, phần tử với position: absolute; sẽ được căn chỉnh dựa trên phần tử gốc của tài liệu (thường là body hoặc phần tử gốc khác).\nCSS position fixed\nTrong CSS, thuộc tính position: fixed được sử dụng để định vị một phần tử cố định (fixed) liên quan đến viewport, không phụ thuộc vào vị trí cuộn trang. Khi một phần tử được đặt thành position: fixed, phần tử đó sẽ được loại bỏ khỏi luồng văn bản thông thường và vị trí của nó sẽ được xác định dựa trên viewport.\nDưới đây là một số điểm quan trọng về position: fixed:\nVị trí cố định: Phần tử được định vị liên quan đến viewport. Nó sẽ không di chuyển ngay cả khi trang được cuộn.\nBị loại bỏ khỏi luồng văn bản thông thường: Khi một phần tử được đặt thành position: fixed, nó sẽ được loại bỏ khỏi luồng văn bản thông thường. Các phần tử khác sẽ bỏ qua không gian mà nó chiếm.\nChồng chất nội dung: Vì các phần tử cố định được định vị liên quan đến viewport, chúng có thể chồng lên các phần tử khác trên trang. Bạn có thể kiểm soát thứ tự chồng chất bằng cách sử dụng thuộc tính z-index.\nKhông cuộn trang: Các phần tử cố định không cuộn cùng với phần còn lại của trang. Chúng được cố định ở vị trí trong viewport.\nĐể sử dụng position: fixed, bạn cần áp dụng nó cho một phần tử HTML bằng CSS. Dưới đây là một ví dụ:\n.fixed-element {\rposition: fixed;\rtop: 20px;\rleft: 20px;\rz-index: 100;\r} Trong ví dụ này, lớp .fixed-element được đặt thành vị trí cố định. Nó sẽ được định vị 20 pixel từ phía trên và 20 pixel từ phía trái của viewport. Thuộc tính z-index được đặt thành 100 để kiểm soát thứ tự chồng chất của phần tử.\nBạn có thể điều chỉnh các thuộc tính top, bottom, left và right để định vị phần tử ở bất kỳ vị trí nào trong viewport.\nHãy nhớ rằng các phần tử cố định không bị ảnh hưởng bởi cuộn trang, do đó chúng có thể gây ra vấn đề về bố cục hoặc chồng chất nội dung khác. Quan trọng là kiểm tra và điều chỉnh vị trí của chúng để đảm bảo chúng hoạt động tốt trong bố cục của bạn.\nCSS position sticky\nTrong CSS, thuộc tính position: sticky được sử dụng để định vị một phần tử dính (sticky) trong luồng văn bản thông thường, nhưng chuyển sang vị trí cố định (fixed) khi nó tiếp xúc với ranh giới của một phần tử chứa.\nDưới đây là một số điểm quan trọng về position: sticky:\nVị trí dính: Phần tử được định vị bình thường trong luồng văn bản, nhưng nó chuyển sang vị trí cố định (fixed) khi nó tiếp xúc với ranh giới của một phần tử chứa (container element).\nChuyển đổi linh hoạt: Phần tử sẽ đi theo luồng văn bản thông thường cho đến khi nó tiếp xúc với ranh giới của phần tử chứa. Khi đó, nó sẽ bị \u0026ldquo;dính\u0026rdquo; vào vị trí cố định (fixed) và không di chuyển khi trang được cuộn. Khi phần tử chạm đến ranh giới dưới của phần tử chứa, nó sẽ ngừng \u0026ldquo;dính\u0026rdquo; và tiếp tục di chuyển theo luồng văn bản thông thường.\nThành phần chứa: position: sticky chỉ hoạt động khi áp dụng cho một phần tử con của một phần tử chứa (container element). Phần tử chứa phải có một chiều cao được định rõ và thuộc tính overflow được đặt thành giá trị khác visible.\nVị trí mặc định: Mặc định, phần tử sẽ được định vị dính ở vị trí ban đầu trong phần tử chứa, nhưng bạn có thể sử dụng các thuộc tính top, bottom, left, right để điều chỉnh vị trí dính.\nVí dụ:\n.sticky-element {\rposition: sticky;\rtop: 20px;\r} Trong ví dụ này, lớp .sticky-element được đặt thành vị trí dính. Nó sẽ được định vị ở vị trí ban đầu, và khi tiếp xúc với ranh giới của phần tử chứa, nó sẽ \u0026ldquo;dính\u0026rdquo; ở vị trí cố định (fixed) và không di chuyển khi trang được cuộn. Thuộc tính top được đặt thành 20px để chỉ định khoảng cách từ phía trên của phần tử chứa.\nLưu ý rằng position: sticky không được hỗ trợ trên tất cả các trình duyệt và phiên bản. Vì vậy, bạn nên kiểm tra tính tương thích trình duyệt trước khi sử dụng nó.\n"
},
{
	"uri": "//localhost:1313/6-align/",
	"title": "Một số tricks và tips",
	"tags": [],
	"description": "",
	"content": "Một số cách căn giữa trong CSS Các cách căn giữa trong CSS Căn giữa các phần tử trong CSS có thể được thực hiện bằng nhiều cách khác nhau, tùy thuộc vào loại phần tử và yêu cầu cụ thể của bạn. Dưới đây là một số cách phổ biến để căn giữa các phần tử:\nCăn giữa theo chiều ngang (horizontal centering):\nCăn giữa phần tử block: Đặt thuộc tính margin-left và margin-right thành auto và đảm bảo rằng phần tử có một chiều rộng cụ thể. Ví dụ: .center-element { margin-left: auto; margin-right: auto; width: 200px; /* Đặt chiều rộng mong muốn */ }\nCăn giữa phần tử inline hoặc inline-block: Sử dụng thuộc tính text-align của phần tử cha để căn giữa các phần tử con theo chiều ngang. Ví dụ: .center-parent { text-align: center; }\n.center-child { display: inline-block; /* hoặc inline */ }\nCăn giữa theo chiều dọc (vertical centering): Căn giữa phần tử block: Sử dụng kỹ thuật \u0026ldquo;absolute positioning\u0026rdquo; và \u0026ldquo;transform\u0026rdquo; để căn giữa theo chiều dọc.\nVí dụ: .center-element { position: relative; top: 50%; transform: translateY(-50%); }\nCăn giữa phần tử inline hoặc inline-block: Sử dụng thuộc tính line-height và vertical-align của phần tử cha để căn giữa các phần tử con theo chiều dọc.\nVí dụ: .center-parent { line-height: 200px; /* Đặt chiều cao mong muốn */ text-align: center; }\n.center-child { display: inline-block; /* hoặc inline */ vertical-align: middle; }\nCăn giữa theo cả hai chiều (horizontal và vertical centering): Sử dụng \u0026ldquo;flexbox\u0026rdquo;: Đặt thuộc tính display của phần tử cha thành flex và sử dụng các thuộc tính justify-content và align-items để căn giữa phần tử con theo cả hai chiều.\nVí dụ: .center-parent { display: flex; justify-content: center; align-items: center; }\nSử dụng \u0026ldquo;grid\u0026rdquo;: Đặt thuộc tính display của phần tử cha thành grid và sử dụng các thuộc tính justify-items và align-items để căn giữa phần tử con theo cả hai chiều.\nVí dụ: .center-parent { display: grid; justify-items: center; align-items: center; } Lưu ý rằng một số kỹ thuật căn giữa có thể yêu cầu một số điều kiện đặc biệt, chẳng hạn như phải có kích thước cụ thể cho phần tử hoặc phải có phần tử cha có kích thước xác định. Hãy kiểm tra và đảm bảo các yêu cầu đó được đáp ứng khi áp dụng các kỹ thuật căn giữa.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]